{"version":3,"sources":["../../server/models/class_info_scraper.js"],"names":["Nightmare","require","nightmare","ClassInfoScraper","userName","passWord","rosterLinks","index","getClasses","Promise","resolve","reject","setTimeout","goto","wait","screenshot","evaluate","classes","document","querySelectorAll","console","log","studentName","querySelector","innerHTML","match","pop","arr","i","length","href","extract","className","push","then","links","runNext","class_id","students","studentRoster","z","name","halt","catch","error"],"mappings":"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","file":"class_info_scraper.js","sourcesContent":["\"use strict\";\nvar Nightmare = require('nightmare');\nvar nightmare = new Nightmare();\n\n\n class ClassInfoScraper{\n  constructor(userName, passWord){\n    this.userName = userName;\n    this.passWord = passWord;\n    this.rosterLinks = [];\n    this.index = 0;\n  }\n\n  returnRoster(){\n    this.getClasses();\n    return new Promise((resolve, reject)=>{\n      //hacksh but it works, will wait 20 secs, hopefully enough time to be done scraping.\n    setTimeout(()=>{\n        resolve(this.rosterLinks);\n    }, 20000);\n});\n  }\n\n  getClasses(){\n    nightmare\n    .goto(`https://bbhosted.cuny.edu/webapps/login/?userid=${this.userName}&password=${this.passWord}`)\n    .wait(1000)\n    .screenshot(\"bb6.png\")\n    .evaluate(\n    ()=>\n      {\n        const classes = document.querySelectorAll('#_4_1termCourses_noterm ul.coursefakeclass a');\n         console.log(classes);\n        const studentName = document.querySelector(\"#global-nav-link\").innerHTML.match(/\\>(.*)\\<span id=/).pop();\n         console.log(studentName);\n        var arr = [];\n        for(var i=0; i< classes.length; i++){\n          if(classes[i].href.match(/\\id=(.*)\\&url/)){\n            var extract = classes[i].href.match(/\\id=(.*)\\&url/).pop();\n            var className = classes[i].innerHTML;\n            arr.push({'class_id': extract, 'studentName': studentName,'className': className});\n          }\n        }\n        return arr;\n        console.log(arr);\n      }\n)\n  .then((links)=> {\n    this.rosterLinks = links;\n    console.log(links);\n    nightmare\n      .wait(1000)\n      .then((links)=> {\n        this.runNext(this.index);\n      });\n  });\n  }\n// `https://bbhosted.cuny.edu/webapps/blackboard/execute/searchRoster?courseId=${this.rosterLinks[i].id}&course_id=${this.rosterLinks[i].id}&action=search&userInfoSearchKeyString=FIRSTNAME&userInfoSearchOperatorString=Contains&userInfoSearchText=`\n  runNext(i){\n      nightmare\n      .goto(`https://bbhosted.cuny.edu/webapps/blackboard/execute/displayEmail?navItem=email_select_students&course_id=${this.rosterLinks[i].class_id}`)\n      .wait(1000)\n      .screenshot(`${this.rosterLinks[i].class_id}WORKED.png`)\n      .evaluate(\n        ()=>{\n          var students = [];\n          // var studentRoster = document.querySelectorAll('#listContainer_databody tr');\n          var studentRoster = document.querySelectorAll('#USERS_AVAIL  option');\n          console.log(studentRoster);\n          // for(var z=0; z<studentRoster.length;z++){\n          //   var firstName = studentRoster[z].children[1].innerHTML.replace(/\\s/g, '');\n          //   var lastname = studentRoster[z].children[0].children[0].innerHTML.replace(/\\<(.*)\\>/,\"\").replace(/\\s/g, '');\n          //   var fullName = firstName + \" \" + lastname;\n          //   students.push(fullName);\n          // }\n          for(var z=0; z<studentRoster.length; z++){\n            var name = studentRoster[z].innerHTML;\n            students.push(name);\n          }\n            return students;\n        }\n        )\n      .then((students)=>{\n        this.rosterLinks[this.index]['students'] = students;\n        this.index++;\n\n        // only run next search when we successfully get here\n        if(this.index < this.rosterLinks.length){\n            this.runNext(this.index);\n        } else {\n            console.log(this.rosterLinks);\n            console.log(\"End\");\n            nightmare.halt();\n        }\n     })\n      .catch((error)=> {\n        console.error('Search failed:', error);\n      });\n  }\n\n}\nexport default ClassInfoScraper;\n// var scrapper = new ClassInfoScraper('isuru0123','509973006');\n// scrapper.getClasses();\n// {\"username\":\"mmalek1421\",\"password\": \"Gleo1421\"}\n// \"start\": \"nodemon bin/dev\"\n"]}